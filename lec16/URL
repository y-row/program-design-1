>>>command>>>
將輸入的網址的各部分組成拆開來顯示的程式。
利用指標在字串上移動並切割出需要的部分存入struct中，難點在於有些網址的組成非必要，我的作法是在每次切完後檢查對應的特殊字元，來標示接下來要切的部分。


>>>code>>>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct
{
    char *protocol;
    char *host;
    char *pathname;
    char *search;
    char *hash;
    int port;
} Location;

Location *parse_url(char *url);

int main()
{
    char url[500] = "";
    fgets(url, 500, stdin); // Get url string
    Location *l = parse_url(url);
    printf("Location {\n  protocol: %s,\n  host: %s,\n", l->protocol, l->host);
    if (l->port)
        printf("  port: %d,\n", l->port);
    else
        printf("  port: (default),\n");
    printf("  pathname: /%s,\n  search: ?%s,\n  hash: #%s,\n}\n", l->pathname, l->search, l->hash);
    return 0;
}

Location *parse_url(char *url)
{
    char *p=url;
   static Location x;
    int check=0;
    int i;
    int size_url=0;
    while(url[size_url]!='\0')
    {
        size_url++;
    }
    /*protocol*/
    for(i=0;i<size_url;i++)
    {
        if(*(i+p)==':'&&*(i+p+1)=='/'&&*(i+p+2)=='/')
        {
            *(i+p)='\0';
            x.protocol=p;
            p+=(i+3);
            check=1;
            break;
        }
    }
    if(check==0)
    {
        x.protocol=NULL;
        i=0;
    }
    check=0;
    /*host 不用check hash 因為沒有hash就全部都是host*/
    int check_pathname=1;
    int check_search=1;
    int check_port=1;
    for(int j=0;j<size_url-i;j++)
    {
        if(*(j+p)==':'||*(j+p)=='/'||*(j+p)=='?'||*(j+p)=='#')
        {
            char ch=*(j+p);
            *(j+p)='\0';
            x.host=p;
            i+=j;
            p+=(j+1);
            check=1;
            switch(ch)
            {
                case '#':
                    check_search=0;
                case '?':
                    check_pathname=0;
                case '/':
                    check_port=0;
                    break;
            }
            break;
        }
    }
    if(!check)
    {
        x.host=p;
        int t=0;
        while(*(p+t)!='\n')
        {
            t++;
        }
        *(p+t)='\0';
        x.port=0;
        x.search="";
        x.pathname="";
        x.hash="";
        return &x;
    }

    /*port*/
    if(check_port)
    {
        check=0;
        for(int j=0;j<size_url-i;j++)
        {
            if(*(j+p)=='/'||*(j+p)=='?'||*(j+p)=='#')
            {
                char ch=*(j+p);
                *(j+p)='\0';
                int t=0;
                int j_tmp=j;
                x.port=0;
                int plus=0;
                for(int z=0;*(z+p)!='\0';z++)
                {
                    for(t=z;t<j;t++)
                    {
                        plus=(*(t+p)-48)*10;
                    }
                    x.port+=plus;
                    plus=0;
                }

                i+=j;
                p+=(j+1);
                check=1;
                switch(ch)
                {
                    case '#':
                        check_search=0;
                    case '?':
                        check_pathname=0;
                        break;
                }
                break;
            }
        }
    }
    if(!check)
    {
        x.port=p;
        int t=0;
        while(*(p+t)!='\n')
        {
            t++;
        }
        *(p+t)='\0';
        x.search="";
        x.pathname="";
        x.hash="";
        return &x;
    }
    /*pathname*/
    if(check_pathname)
    {
        check=0;
        for(int j=0;j<size_url-i;j++)
        {
            if(*(j+p)=='?'||*(j+p)=='#')
            {
                char ch=*(j+p);
                *(j+p)='\0';
                x.pathname=p;
                i+=j;
                p+=(j+1);
                check=1;
                switch(ch)
                {
                    case '#':
                        check_search=0;
                        break;
                }
                break;
            }
        }
    }
    if(!check)
    {
        x.pathname=p;
        int t=0;
        while(*(p+t)!='\n')
        {
            t++;
        }
        *(p+t)='\0';
        x.search="";
        x.hash="";
        return &x;
    }
    /*search*/
    if(check_search)
    {
        check=0;
        for(int j=0;j<size_url-i;j++)
        {
            if(*(j+p)=='#')
            {
                char ch=*(j+p);
                *(j+p)='\0';
                x.pathname=p;
                i+=j;
                p+=(j+1);
                check=1;
                break;
            }
        }
    }
    if(!check)
    {
        x.search=p;
        int t=0;
        while(*(p+t)!='\n')
        {
            t++;
        }
        *(p+t)='\0';
        x.hash="";
        return &x;
    }
    /*hash*/
    for(int j=0;j<size_url-i;j++)
    {
        if(*(j+p)=='\n')
        {
            char ch=*(j+p);
            *(j+p-1)='\0';
            x.hash=p;
            i+=j;
            p+=(j+1);
            break;
        }
    }



    return  &x;
}
